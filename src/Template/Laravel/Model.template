<?php

namespace {$namespace};

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
//use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * Class {$class_name}
 * Generated by dtech-lar-cli/cli package
 * @package {$namespace}
 */
class {$class_name} extends Model
{
    //use SoftDeletes;

    //protected $connection = 'mysql';

    protected $table = '{$table_name}';

    public $timestamps = true;

    //protected $dates = ['deleted_at'];

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [];

    /**
     * The "booting" method of the model.
     *
     * @return void
     */
    protected static function boot()
    {
        parent::boot();
        //static::addGlobalScope(new CreatedByScope());
    }

    /**
     * Perform a model insert operation.
     *
     * @param Builder $query
     * @return bool
     */
    protected function performInsert(Builder $query)
    {
        return parent::performInsert($query); // TODO: Change the autogenerated stub
    }

    /**
     * Perform a model update operation.
     *
     * @param Builder $query
     * @return bool
     */
    protected function performUpdate(Builder $query)
    {
        return parent::performUpdate($query); // TODO: Change the autogenerated stub
    }

    /**
     * Perform the actual delete query on this model instance.
     *
     */
    protected function performDeleteOnModel()
    {
        parent::performDeleteOnModel(); // TODO: Change the autogenerated stub
    }

    /**
     * Saving event
     *
     * @param \Closure|string $callback
     */
    public static function saving($callback)
    {
        //
    }

    /**
     * Saved event
     *
     * @param \Closure|string $callback
     */
    public static function saved($callback)
    {
        //
    }

    /**
     * Updating event
     *
     * @param \Closure|string $callback
     */
    public static function updating($callback)
    {
        //
    }

    /**
     * Updated event
     *
     * @param \Closure|string $callback
     */
    public static function updated($callback)
    {
        //
    }

    /**
     * Deleting event
     *
     * @param \Closure|string $callback
     */
    public static function deleting($callback)
    {
        //
    }

    /**
     * Deleted event
     *
     * @param \Closure|string $callback
     */
    public static function deleted($callback)
    {
        //
    }
}
